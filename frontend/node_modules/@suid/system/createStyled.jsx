import { createDynamicComponent } from "./Dynamic";
import createStyle from "./createStyle";
import resolveStyledProps from "./resolveStyledProps";
import resolveSxProps from "./resolveSxProps";
import useTheme from "./useTheme";
import { randomString } from "@suid/utils";
import clsx from "clsx";
import { createMemo, splitProps, mergeProps } from "solid-js";
export function redefine(component, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
..._types) {
    return component;
}
export const skipProps = [
    "ownerState",
    "theme",
    "sx",
    "as",
];
function resolveStyles(useTheme, className, styles, inProps) {
    return createMemo(() => {
        const theme = useTheme();
        const ownerState = inProps.ownerState;
        return styles.reduce((result, style) => {
            let styledProps;
            if (typeof style === "function") {
                styledProps = style({
                    ownerState,
                    theme,
                    get sx() {
                        return inProps.sx;
                    },
                    get as() {
                        return inProps.as;
                    },
                    props: inProps,
                });
            }
            else if (style) {
                styledProps = style;
            }
            if (styledProps)
                result.push(resolveStyledProps(styledProps, {
                    name: className,
                    __resolved: true,
                }));
            return result;
        }, []);
    });
}
function isStyledComponent(input) {
    return typeof input === "function" && "__styled" in input && !!input.__styled;
}
function createStyled(config) {
    return function styled(Component, options = {}) {
        let cssClassName;
        let className;
        if (options.name) {
            const slot = options.slot || "Root";
            className = cssClassName = `${options.name}-${slot.slice(0, 1).toLowerCase() + slot.slice(1)}`;
        }
        else {
            className = `styled-${randomString()}`;
            cssClassName = "css";
        }
        const isComponentStyled = isStyledComponent(Component);
        return function (...styles) {
            function StyledComponent(inProps) {
                let theme;
                const $useTheme = () => {
                    const inTheme = inProps.theme;
                    if (inTheme) {
                        return inTheme;
                    }
                    else if (theme) {
                        return theme;
                    }
                    else {
                        return (theme =
                            config && config.onUseTheme
                                ? config.onUseTheme()
                                : useTheme());
                    }
                };
                const [, otherProps] = splitProps(inProps, options.skipProps || skipProps);
                const inStyles = resolveStyles($useTheme, cssClassName, styles, inProps);
                const inSx = () => {
                    const sx = inProps.sx;
                    return (sx ? (Array.isArray(sx) ? sx : [sx]) : []);
                };
                const $component = () => {
                    if (isComponentStyled)
                        return Component;
                    const as = inProps.as;
                    return as ? as : Component;
                };
                const is$ComponentStyled = isComponentStyled
                    ? () => true
                    : createMemo(() => isStyledComponent($component()));
                const sx = options.skipSx
                    ? () => inStyles()
                    : () => {
                        const theme = $useTheme();
                        return [
                            ...inStyles(),
                            ...inSx().map((sx) => sx.__resolved ? sx : resolveSxProps(sx, theme)),
                        ];
                    };
                const styleClassName = createStyle(() => is$ComponentStyled() ? undefined : sx());
                return createDynamicComponent($component, mergeProps(otherProps, {
                    get children() {
                        return inProps.children;
                    },
                    // [review] This property must be omitted on each component individually.
                    get component() {
                        return is$ComponentStyled() ? inProps.component : null;
                    },
                    get as() {
                        return isComponentStyled ? inProps.as : undefined;
                    },
                    get sx() {
                        return is$ComponentStyled() ? sx() : undefined;
                    },
                    get ownerState() {
                        return is$ComponentStyled() ? inProps.ownerState : undefined;
                    },
                    get class() {
                        return clsx([
                            ...new Set([inProps.class, className, styleClassName()]),
                        ]);
                    },
                }));
            }
            StyledComponent["__styled"] = true;
            if (className)
                StyledComponent.toString = () => `.${className}`;
            return StyledComponent;
        };
    };
}
export default createStyled;
