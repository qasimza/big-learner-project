import { SelectTypeMap } from ".";
import { DefaultComponentProps } from "@suid/types";
import { JSX } from "solid-js";
/**
 *
 * Demos:
 *
 * - [Selects](https://mui.com/components/selects/)
 *
 * API:
 *
 * - [Select API](https://mui.com/api/select/)
 * - inherits [OutlinedInput API](https://mui.com/api/outlined-input/)
 */
declare const Select: {
    <V = any>(props: {
        autoWidth?: boolean | undefined;
        children?: JSX.Element;
        classes?: Partial<import("./selectClasses").SelectClasses> | undefined;
        defaultOpen?: boolean | undefined;
        defaultValue?: V | undefined;
        displayEmpty?: boolean | undefined;
        IconComponent?: import("@suid/types").ElementType | undefined;
        id?: string | undefined;
        input?: JSX.Element;
        inputProps?: import("@suid/types").PropsOf<"textarea" | "input"> | undefined;
        label?: JSX.Element;
        labelId?: string | undefined;
        MenuProps?: Partial<import("../Menu").MenuProps> | undefined;
        multiple?: boolean | undefined;
        native?: boolean | undefined;
        onChange?: ((event: Event & {
            target: {
                value: any;
                name: string;
            };
        }, child: JSX.Element) => void) | undefined;
        onClose?: ((event: Event) => void) | undefined;
        onOpen?: ((event: Event) => void) | undefined;
        open?: boolean | undefined;
        renderValue?: ((value: V) => JSX.Element) | undefined;
        SelectDisplayProps?: JSX.HTMLAttributes<HTMLDivElement> | undefined;
        sx?: import("@suid/system").SxProps<import("..").Theme<import("@suid/system").Breakpoint>> | undefined;
        value?: V | undefined;
        variant?: "filled" | "outlined" | "standard" | undefined;
    } & Omit<{
        "aria-describedby"?: string | undefined;
        autoComplete?: string | undefined;
        autoFocus?: boolean | undefined;
        classes?: Partial<import("../InputBase/inputBaseClasses").InputBaseClasses> | undefined;
        color?: import("@suid/types").OverridableStringUnion<"primary" | "secondary" | "error" | "warning" | "info" | "success", import("../InputBase").InputBasePropsColorOverrides> | undefined;
        components?: {
            Root?: import("@suid/types").ElementType | undefined;
            Input?: import("@suid/types").ElementType | undefined;
        } | undefined;
        componentsProps?: {
            root?: (JSX.HTMLAttributes<HTMLDivElement> & import("../InputBase").InputBaseComponentsPropsOverrides) | undefined;
            input?: (JSX.HTMLAttributes<HTMLInputElement> & import("../InputBase").InputBaseComponentsPropsOverrides) | undefined;
        } | undefined;
        defaultValue?: unknown;
        disabled?: boolean | undefined;
        disableInjectingGlobalStyles?: boolean | undefined;
        endAdornment?: JSX.Element;
        error?: boolean | undefined;
        fullWidth?: boolean | undefined;
        id?: string | undefined;
        inputComponent?: string | import("solid-js").Component<any> | undefined;
        inputProps?: import("@suid/types").PropsOf<"textarea" | "input"> | undefined;
        inputRef?: import("@suid/types").Ref<HTMLInputElement | HTMLTextAreaElement> | undefined;
        margin?: "none" | "dense" | undefined;
        multiline?: boolean | undefined;
        name?: string | undefined;
        onBlur?: import("@suid/types").FocusEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
        onChange?: import("@suid/types").ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
        onFocus?: import("@suid/types").FocusEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
        onKeyDown?: import("@suid/types").KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
        onKeyUp?: import("@suid/types").KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        renderSuffix?: ((state: {
            disabled?: boolean | undefined;
            error?: boolean | undefined;
            filled?: boolean | undefined;
            focused?: boolean | undefined;
            margin?: "normal" | "none" | "dense" | undefined;
            required?: boolean | undefined;
            startAdornment?: JSX.Element;
        }) => JSX.Element) | undefined;
        rows?: string | number | undefined;
        maxRows?: string | number | undefined;
        minRows?: string | number | undefined;
        size?: import("@suid/types").OverridableStringUnion<"medium" | "small", import("../InputBase").InputBasePropsSizeOverrides> | undefined;
        startAdornment?: JSX.Element;
        sx?: import("@suid/system").SxProps<import("..").Theme<import("@suid/system").Breakpoint>> | undefined;
        type?: string | undefined;
        value?: unknown;
    } & import("@suid/types").CommonProps & Omit<JSX.HTMLAttributes<HTMLDivElement>, "color" | "size" | "disabled" | "margin" | "onBlur" | "onChange" | "onFocus" | "onKeyDown" | "onKeyUp" | "id" | "aria-describedby" | "type" | "name" | "value" | "placeholder" | "required" | "readOnly" | "rows" | keyof import("@suid/types").CommonProps | "sx" | "classes" | "error" | "components" | "componentsProps" | "fullWidth" | "autoFocus" | "inputProps" | "inputRef" | "multiline" | "disableInjectingGlobalStyles" | "inputComponent" | "autoComplete" | "defaultValue" | "endAdornment" | "renderSuffix" | "maxRows" | "minRows" | "startAdornment"> & {
        classes?: Partial<import("../Input/inputClasses").InputClasses> | undefined;
        disableUnderline?: boolean | undefined;
        sx?: import("@suid/system").SxProps<import("..").Theme<import("@suid/system").Breakpoint>> | undefined;
    }, "onChange" | "value"> & Omit<import("../OutlinedInput").OutlinedInputProps, "onChange" | "value"> & Pick<import("./SelectInputProps").SelectInputProps<"div", {}, V>, "onChange"> & import("@suid/types").CommonProps & Omit<JSX.HTMLAttributes<HTMLDivElement>, "hidden" | "color" | "size" | "style" | "open" | "translate" | "multiple" | "disabled" | "margin" | "children" | "innerHTML" | "innerText" | "textContent" | "onCopy" | "onCut" | "onPaste" | "onCompositionEnd" | "onCompositionStart" | "onCompositionUpdate" | "onFocusOut" | "onFocusIn" | "onEncrypted" | "onDragExit" | "oncopy" | "oncut" | "onpaste" | "oncompositionend" | "oncompositionstart" | "oncompositionupdate" | "onfocusout" | "onfocusin" | "onencrypted" | "ondragexit" | "ref" | "classList" | "$ServerOnly" | "onAbort" | "onAnimationEnd" | "onAnimationIteration" | "onAnimationStart" | "onAuxClick" | "onBeforeInput" | "onBlur" | "onCanPlay" | "onCanPlayThrough" | "onChange" | "onClick" | "onContextMenu" | "onDblClick" | "onDrag" | "onDragEnd" | "onDragEnter" | "onDragLeave" | "onDragOver" | "onDragStart" | "onDrop" | "onDurationChange" | "onEmptied" | "onEnded" | "onError" | "onFocus" | "onGotPointerCapture" | "onInput" | "onInvalid" | "onKeyDown" | "onKeyPress" | "onKeyUp" | "onLoad" | "onLoadedData" | "onLoadedMetadata" | "onLoadStart" | "onLostPointerCapture" | "onMouseDown" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseOut" | "onMouseOver" | "onMouseUp" | "onPause" | "onPlay" | "onPlaying" | "onPointerCancel" | "onPointerDown" | "onPointerEnter" | "onPointerLeave" | "onPointerMove" | "onPointerOut" | "onPointerOver" | "onPointerUp" | "onProgress" | "onRateChange" | "onReset" | "onScroll" | "onSeeked" | "onSeeking" | "onSelect" | "onStalled" | "onSubmit" | "onSuspend" | "onTimeUpdate" | "onTouchCancel" | "onTouchEnd" | "onTouchMove" | "onTouchStart" | "onTransitionEnd" | "onVolumeChange" | "onWaiting" | "onWheel" | "accessKey" | "contenteditable" | "contextmenu" | "dir" | "draggable" | "id" | "inert" | "lang" | "spellcheck" | "tabindex" | "title" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autocapitalize" | "slot" | "itemprop" | "itemscope" | "itemtype" | "itemid" | "itemref" | "part" | "exportparts" | "inputmode" | "contentEditable" | "contextMenu" | "tabIndex" | "autoCapitalize" | "itemProp" | "itemScope" | "itemType" | "itemId" | "itemRef" | "exportParts" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "role" | "type" | "name" | "value" | "onClose" | "placeholder" | "required" | "readOnly" | "label" | "rows" | "onabort" | "onanimationend" | "onanimationiteration" | "onanimationstart" | "onauxclick" | "onbeforeinput" | "onblur" | "oncanplay" | "oncanplaythrough" | "onchange" | "onclick" | "oncontextmenu" | "ondblclick" | "ondrag" | "ondragend" | "ondragenter" | "ondragleave" | "ondragover" | "ondragstart" | "ondrop" | "ondurationchange" | "onemptied" | "onended" | "onerror" | "onfocus" | "ongotpointercapture" | "oninput" | "oninvalid" | "onkeydown" | "onkeypress" | "onkeyup" | "onload" | "onloadeddata" | "onloadedmetadata" | "onloadstart" | "onlostpointercapture" | "onmousedown" | "onmouseenter" | "onmouseleave" | "onmousemove" | "onmouseout" | "onmouseover" | "onmouseup" | "onpause" | "onplay" | "onplaying" | "onpointercancel" | "onpointerdown" | "onpointerenter" | "onpointerleave" | "onpointermove" | "onpointerout" | "onpointerover" | "onpointerup" | "onprogress" | "onratechange" | "onreset" | "onscroll" | "onseeked" | "onseeking" | "onselect" | "onstalled" | "onsubmit" | "onsuspend" | "ontimeupdate" | "ontouchcancel" | "ontouchend" | "ontouchmove" | "ontouchstart" | "ontransitionend" | "onvolumechange" | "onwaiting" | "onwheel" | "input" | keyof import("@suid/types").CommonProps | "sx" | "classes" | "error" | "variant" | "components" | "componentsProps" | "fullWidth" | "autoFocus" | "inputProps" | "inputRef" | "multiline" | "disableInjectingGlobalStyles" | "inputComponent" | "autoComplete" | "defaultValue" | "endAdornment" | "renderSuffix" | "maxRows" | "minRows" | "startAdornment" | "disableUnderline" | "IconComponent" | "notched" | "labelId" | "displayEmpty" | "autoWidth" | "defaultOpen" | "MenuProps" | "native" | "onOpen" | "renderValue" | "SelectDisplayProps">): JSX.Element;
    _suid: true;
};
export default Select;
//# sourceMappingURL=Select.d.ts.map